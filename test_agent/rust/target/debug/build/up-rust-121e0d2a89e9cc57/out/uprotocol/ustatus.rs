// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ustatus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:uprotocol.v1.UStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UStatus {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.v1.UStatus.code)
    pub code: ::protobuf::EnumOrUnknown<UCode>,
    // @@protoc_insertion_point(field:uprotocol.v1.UStatus.message)
    pub message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:uprotocol.v1.UStatus.details)
    pub details: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.v1.UStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UStatus {
    fn default() -> &'a UStatus {
        <UStatus as ::protobuf::Message>::default_instance()
    }
}

impl UStatus {
    pub fn new() -> UStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &UStatus| { &m.code },
            |m: &mut UStatus| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &UStatus| { &m.message },
            |m: &mut UStatus| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "details",
            |m: &UStatus| { &m.details },
            |m: &mut UStatus| { &mut m.details },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UStatus>(
            "UStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UStatus {
    const NAME: &'static str = "UStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.details.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != ::protobuf::EnumOrUnknown::new(UCode::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.code.value());
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.details {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != ::protobuf::EnumOrUnknown::new(UCode::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.code))?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.details {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UStatus {
        UStatus::new()
    }

    fn clear(&mut self) {
        self.code = ::protobuf::EnumOrUnknown::new(UCode::OK);
        self.message = ::std::option::Option::None;
        self.details.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UStatus {
        static instance: UStatus = UStatus {
            code: ::protobuf::EnumOrUnknown::from_i32(0),
            message: ::std::option::Option::None,
            details: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:uprotocol.v1.UCode)
pub enum UCode {
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.OK)
    OK = 0,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.CANCELLED)
    CANCELLED = 1,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.UNKNOWN)
    UNKNOWN = 2,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.INVALID_ARGUMENT)
    INVALID_ARGUMENT = 3,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.DEADLINE_EXCEEDED)
    DEADLINE_EXCEEDED = 4,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.NOT_FOUND)
    NOT_FOUND = 5,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.ALREADY_EXISTS)
    ALREADY_EXISTS = 6,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.PERMISSION_DENIED)
    PERMISSION_DENIED = 7,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.UNAUTHENTICATED)
    UNAUTHENTICATED = 16,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.RESOURCE_EXHAUSTED)
    RESOURCE_EXHAUSTED = 8,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.FAILED_PRECONDITION)
    FAILED_PRECONDITION = 9,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.ABORTED)
    ABORTED = 10,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.OUT_OF_RANGE)
    OUT_OF_RANGE = 11,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.UNIMPLEMENTED)
    UNIMPLEMENTED = 12,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.INTERNAL)
    INTERNAL = 13,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.UNAVAILABLE)
    UNAVAILABLE = 14,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UCode.DATA_LOSS)
    DATA_LOSS = 15,
}

impl ::protobuf::Enum for UCode {
    const NAME: &'static str = "UCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UCode> {
        match value {
            0 => ::std::option::Option::Some(UCode::OK),
            1 => ::std::option::Option::Some(UCode::CANCELLED),
            2 => ::std::option::Option::Some(UCode::UNKNOWN),
            3 => ::std::option::Option::Some(UCode::INVALID_ARGUMENT),
            4 => ::std::option::Option::Some(UCode::DEADLINE_EXCEEDED),
            5 => ::std::option::Option::Some(UCode::NOT_FOUND),
            6 => ::std::option::Option::Some(UCode::ALREADY_EXISTS),
            7 => ::std::option::Option::Some(UCode::PERMISSION_DENIED),
            16 => ::std::option::Option::Some(UCode::UNAUTHENTICATED),
            8 => ::std::option::Option::Some(UCode::RESOURCE_EXHAUSTED),
            9 => ::std::option::Option::Some(UCode::FAILED_PRECONDITION),
            10 => ::std::option::Option::Some(UCode::ABORTED),
            11 => ::std::option::Option::Some(UCode::OUT_OF_RANGE),
            12 => ::std::option::Option::Some(UCode::UNIMPLEMENTED),
            13 => ::std::option::Option::Some(UCode::INTERNAL),
            14 => ::std::option::Option::Some(UCode::UNAVAILABLE),
            15 => ::std::option::Option::Some(UCode::DATA_LOSS),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<UCode> {
        match str {
            "OK" => ::std::option::Option::Some(UCode::OK),
            "CANCELLED" => ::std::option::Option::Some(UCode::CANCELLED),
            "UNKNOWN" => ::std::option::Option::Some(UCode::UNKNOWN),
            "INVALID_ARGUMENT" => ::std::option::Option::Some(UCode::INVALID_ARGUMENT),
            "DEADLINE_EXCEEDED" => ::std::option::Option::Some(UCode::DEADLINE_EXCEEDED),
            "NOT_FOUND" => ::std::option::Option::Some(UCode::NOT_FOUND),
            "ALREADY_EXISTS" => ::std::option::Option::Some(UCode::ALREADY_EXISTS),
            "PERMISSION_DENIED" => ::std::option::Option::Some(UCode::PERMISSION_DENIED),
            "UNAUTHENTICATED" => ::std::option::Option::Some(UCode::UNAUTHENTICATED),
            "RESOURCE_EXHAUSTED" => ::std::option::Option::Some(UCode::RESOURCE_EXHAUSTED),
            "FAILED_PRECONDITION" => ::std::option::Option::Some(UCode::FAILED_PRECONDITION),
            "ABORTED" => ::std::option::Option::Some(UCode::ABORTED),
            "OUT_OF_RANGE" => ::std::option::Option::Some(UCode::OUT_OF_RANGE),
            "UNIMPLEMENTED" => ::std::option::Option::Some(UCode::UNIMPLEMENTED),
            "INTERNAL" => ::std::option::Option::Some(UCode::INTERNAL),
            "UNAVAILABLE" => ::std::option::Option::Some(UCode::UNAVAILABLE),
            "DATA_LOSS" => ::std::option::Option::Some(UCode::DATA_LOSS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [UCode] = &[
        UCode::OK,
        UCode::CANCELLED,
        UCode::UNKNOWN,
        UCode::INVALID_ARGUMENT,
        UCode::DEADLINE_EXCEEDED,
        UCode::NOT_FOUND,
        UCode::ALREADY_EXISTS,
        UCode::PERMISSION_DENIED,
        UCode::UNAUTHENTICATED,
        UCode::RESOURCE_EXHAUSTED,
        UCode::FAILED_PRECONDITION,
        UCode::ABORTED,
        UCode::OUT_OF_RANGE,
        UCode::UNIMPLEMENTED,
        UCode::INTERNAL,
        UCode::UNAVAILABLE,
        UCode::DATA_LOSS,
    ];
}

impl ::protobuf::EnumFull for UCode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("UCode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            UCode::OK => 0,
            UCode::CANCELLED => 1,
            UCode::UNKNOWN => 2,
            UCode::INVALID_ARGUMENT => 3,
            UCode::DEADLINE_EXCEEDED => 4,
            UCode::NOT_FOUND => 5,
            UCode::ALREADY_EXISTS => 6,
            UCode::PERMISSION_DENIED => 7,
            UCode::UNAUTHENTICATED => 8,
            UCode::RESOURCE_EXHAUSTED => 9,
            UCode::FAILED_PRECONDITION => 10,
            UCode::ABORTED => 11,
            UCode::OUT_OF_RANGE => 12,
            UCode::UNIMPLEMENTED => 13,
            UCode::INTERNAL => 14,
            UCode::UNAVAILABLE => 15,
            UCode::DATA_LOSS => 16,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for UCode {
    fn default() -> Self {
        UCode::OK
    }
}

impl UCode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<UCode>("UCode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rustatus.proto\x12\x0cuprotocol.v1\x1a\x19google/protobuf/any.proto\"\
    \x8d\x01\n\x07UStatus\x12'\n\x04code\x18\x01\x20\x01(\x0e2\x13.uprotocol\
    .v1.UCodeR\x04code\x12\x1d\n\x07message\x18\x02\x20\x01(\tH\0R\x07messag\
    e\x88\x01\x01\x12.\n\x07details\x18\x03\x20\x03(\x0b2\x14.google.protobu\
    f.AnyR\x07detailsB\n\n\x08_message*\xb8\x02\n\x05UCode\x12\x06\n\x02OK\
    \x10\0\x12\r\n\tCANCELLED\x10\x01\x12\x0b\n\x07UNKNOWN\x10\x02\x12\x14\n\
    \x10INVALID_ARGUMENT\x10\x03\x12\x15\n\x11DEADLINE_EXCEEDED\x10\x04\x12\
    \r\n\tNOT_FOUND\x10\x05\x12\x12\n\x0eALREADY_EXISTS\x10\x06\x12\x15\n\
    \x11PERMISSION_DENIED\x10\x07\x12\x13\n\x0fUNAUTHENTICATED\x10\x10\x12\
    \x16\n\x12RESOURCE_EXHAUSTED\x10\x08\x12\x17\n\x13FAILED_PRECONDITION\
    \x10\t\x12\x0b\n\x07ABORTED\x10\n\x12\x10\n\x0cOUT_OF_RANGE\x10\x0b\x12\
    \x11\n\rUNIMPLEMENTED\x10\x0c\x12\x0c\n\x08INTERNAL\x10\r\x12\x0f\n\x0bU\
    NAVAILABLE\x10\x0e\x12\r\n\tDATA_LOSS\x10\x0fB*\n\x18org.eclipse.uprotoc\
    ol.v1B\x0cUStatusProtoP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UStatus::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(UCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
