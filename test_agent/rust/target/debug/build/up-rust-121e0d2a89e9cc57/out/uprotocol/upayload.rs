// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `upayload.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:uprotocol.v1.UPayload)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UPayload {
    // message fields
    // @@protoc_insertion_point(field:uprotocol.v1.UPayload.length)
    pub length: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:uprotocol.v1.UPayload.format)
    pub format: ::protobuf::EnumOrUnknown<UPayloadFormat>,
    // message oneof groups
    pub data: ::std::option::Option<upayload::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:uprotocol.v1.UPayload.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UPayload {
    fn default() -> &'a UPayload {
        <UPayload as ::protobuf::Message>::default_instance()
    }
}

impl UPayload {
    pub fn new() -> UPayload {
        ::std::default::Default::default()
    }

    // fixed64 reference = 1;

    pub fn reference(&self) -> u64 {
        match self.data {
            ::std::option::Option::Some(upayload::Data::Reference(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_reference(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_reference(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(upayload::Data::Reference(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reference(&mut self, v: u64) {
        self.data = ::std::option::Option::Some(upayload::Data::Reference(v))
    }

    // bytes value = 2;

    pub fn value(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(upayload::Data::Value(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(upayload::Data::Value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(upayload::Data::Value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(upayload::Data::Value(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(upayload::Data::Value(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(upayload::Data::Value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_value() {
            match self.data.take() {
                ::std::option::Option::Some(upayload::Data::Value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "reference",
            UPayload::has_reference,
            UPayload::reference,
            UPayload::set_reference,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "value",
            UPayload::has_value,
            UPayload::value,
            UPayload::set_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "length",
            |m: &UPayload| { &m.length },
            |m: &mut UPayload| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &UPayload| { &m.format },
            |m: &mut UPayload| { &mut m.format },
        ));
        oneofs.push(upayload::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UPayload>(
            "UPayload",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UPayload {
    const NAME: &'static str = "UPayload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.data = ::std::option::Option::Some(upayload::Data::Reference(is.read_fixed64()?));
                },
                18 => {
                    self.data = ::std::option::Option::Some(upayload::Data::Value(is.read_bytes()?));
                },
                24 => {
                    self.length = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.format = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if self.format != ::protobuf::EnumOrUnknown::new(UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.format.value());
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &upayload::Data::Reference(v) => {
                    my_size += 1 + 8;
                },
                &upayload::Data::Value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.length {
            os.write_int32(3, v)?;
        }
        if self.format != ::protobuf::EnumOrUnknown::new(UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.format))?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &upayload::Data::Reference(v) => {
                    os.write_fixed64(1, v)?;
                },
                &upayload::Data::Value(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UPayload {
        UPayload::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.format = ::protobuf::EnumOrUnknown::new(UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UPayload {
        static instance: UPayload = UPayload {
            length: ::std::option::Option::None,
            format: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UPayload {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UPayload").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UPayload {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `UPayload`
pub mod upayload {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:uprotocol.v1.UPayload.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:uprotocol.v1.UPayload.reference)
        Reference(u64),
        // @@protoc_insertion_point(oneof_field:uprotocol.v1.UPayload.value)
        Value(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::UPayload as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:uprotocol.v1.UPayloadFormat)
pub enum UPayloadFormat {
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_UNSPECIFIED)
    UPAYLOAD_FORMAT_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_PROTOBUF_WRAPPED_IN_ANY)
    UPAYLOAD_FORMAT_PROTOBUF_WRAPPED_IN_ANY = 1,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_PROTOBUF)
    UPAYLOAD_FORMAT_PROTOBUF = 2,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_JSON)
    UPAYLOAD_FORMAT_JSON = 3,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_SOMEIP)
    UPAYLOAD_FORMAT_SOMEIP = 4,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_SOMEIP_TLV)
    UPAYLOAD_FORMAT_SOMEIP_TLV = 5,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_RAW)
    UPAYLOAD_FORMAT_RAW = 6,
    // @@protoc_insertion_point(enum_value:uprotocol.v1.UPayloadFormat.UPAYLOAD_FORMAT_TEXT)
    UPAYLOAD_FORMAT_TEXT = 7,
}

impl ::protobuf::Enum for UPayloadFormat {
    const NAME: &'static str = "UPayloadFormat";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UPayloadFormat> {
        match value {
            0 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED),
            1 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_PROTOBUF_WRAPPED_IN_ANY),
            2 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_PROTOBUF),
            3 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_JSON),
            4 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_SOMEIP),
            5 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_SOMEIP_TLV),
            6 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_RAW),
            7 => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_TEXT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<UPayloadFormat> {
        match str {
            "UPAYLOAD_FORMAT_UNSPECIFIED" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED),
            "UPAYLOAD_FORMAT_PROTOBUF_WRAPPED_IN_ANY" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_PROTOBUF_WRAPPED_IN_ANY),
            "UPAYLOAD_FORMAT_PROTOBUF" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_PROTOBUF),
            "UPAYLOAD_FORMAT_JSON" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_JSON),
            "UPAYLOAD_FORMAT_SOMEIP" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_SOMEIP),
            "UPAYLOAD_FORMAT_SOMEIP_TLV" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_SOMEIP_TLV),
            "UPAYLOAD_FORMAT_RAW" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_RAW),
            "UPAYLOAD_FORMAT_TEXT" => ::std::option::Option::Some(UPayloadFormat::UPAYLOAD_FORMAT_TEXT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [UPayloadFormat] = &[
        UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED,
        UPayloadFormat::UPAYLOAD_FORMAT_PROTOBUF_WRAPPED_IN_ANY,
        UPayloadFormat::UPAYLOAD_FORMAT_PROTOBUF,
        UPayloadFormat::UPAYLOAD_FORMAT_JSON,
        UPayloadFormat::UPAYLOAD_FORMAT_SOMEIP,
        UPayloadFormat::UPAYLOAD_FORMAT_SOMEIP_TLV,
        UPayloadFormat::UPAYLOAD_FORMAT_RAW,
        UPayloadFormat::UPAYLOAD_FORMAT_TEXT,
    ];
}

impl ::protobuf::EnumFull for UPayloadFormat {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("UPayloadFormat").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for UPayloadFormat {
    fn default() -> Self {
        UPayloadFormat::UPAYLOAD_FORMAT_UNSPECIFIED
    }
}

impl UPayloadFormat {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<UPayloadFormat>("UPayloadFormat")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eupayload.proto\x12\x0cuprotocol.v1\x1a\x17uprotocol_options.proto\
    \"\xa8\x01\n\x08UPayload\x12\x1e\n\treference\x18\x01\x20\x01(\x06H\0R\t\
    reference\x12\x16\n\x05value\x18\x02\x20\x01(\x0cH\0R\x05value\x12\x1b\n\
    \x06length\x18\x03\x20\x01(\x05H\x01R\x06length\x88\x01\x01\x124\n\x06fo\
    rmat\x18\x04\x20\x01(\x0e2\x1c.uprotocol.v1.UPayloadFormatR\x06formatB\
    \x06\n\x04dataB\t\n\x07_length*\xb7\x03\n\x0eUPayloadFormat\x12\x1f\n\
    \x1bUPAYLOAD_FORMAT_UNSPECIFIED\x10\0\x12G\n'UPAYLOAD_FORMAT_PROTOBUF_WR\
    APPED_IN_ANY\x10\x01\x1a\x1a\xe2\x92\x19\x16application/x-protobuf\x126\
    \n\x18UPAYLOAD_FORMAT_PROTOBUF\x10\x02\x1a\x18\xe2\x92\x19\x14applicatio\
    n/protobuf\x12.\n\x14UPAYLOAD_FORMAT_JSON\x10\x03\x1a\x14\xe2\x92\x19\
    \x10application/json\x124\n\x16UPAYLOAD_FORMAT_SOMEIP\x10\x04\x1a\x18\
    \xe2\x92\x19\x14application/x-someip\x12<\n\x1aUPAYLOAD_FORMAT_SOMEIP_TL\
    V\x10\x05\x1a\x1c\xe2\x92\x19\x18application/x-someip_tlv\x125\n\x13UPAY\
    LOAD_FORMAT_RAW\x10\x06\x1a\x1c\xe2\x92\x19\x18application/octet-stream\
    \x12(\n\x14UPAYLOAD_FORMAT_TEXT\x10\x07\x1a\x0e\xe2\x92\x19\ntext/plainB\
    +\n\x18org.eclipse.uprotocol.v1B\rUPayloadProtoP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::uprotocol_options::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UPayload::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(UPayloadFormat::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
