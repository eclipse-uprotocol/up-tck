name: TCK Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  run_tests:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      working-directory: up_tck/test_agents/java_test_agent
      run: |
            mvn clean install --file pom.xml
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
        pip install .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: TCK Behave Tests
      run: |
          behave  --format json --outfile ./BDD/reports/send_report.json --format plain --outfile ./BDD/reports/send_report.txt ./BDD/features/tests/send.feature
          behave  --format json --outfile ./BDD/reports/register_listener_report.json --format plain --outfile ./BDD/reports/register_listener_report.txt ./BDD/features/tests/register_listener.feature
          behave  --format json --outfile ./BDD/reports/invoke_method_report.json --format plain --outfile ./BDD/reports/invoke_method_report.txt ./BDD/features/tests/invoke_method.feature
    - name: Print Out Behave Report
      run: |
          cd ./BDD/reports
          cat send_report.txt
          cat register_listener_report.txt
          cat invoke_method_report.txt
    - name: "Read JSON"
      uses: actions/github-script@v6
      id: check-env
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
            const send_json = fs.readFileSync('./BDD/reports/send_report.json')
            const register_listener_json = fs.readFileSync('./BDD/reports/register_listener_report.json')
            const invoke_method_json = fs.readFileSync('./BDD/reports/invoke_method_report.json')
            const json_list = []
            json_list.push(JSON.parse(send_json))
            json_list.push(JSON.parse(register_listener_json))
            json_list.push(JSON.parse(invoke_method_json))
            for (let i = 0; i < json_list.length; i++) {
              if (json_list[i]["status"] != "passed") {
                core.setFailed("One or more features failed")
                core.error("Feature:" + json_list[i]["name"] + " failed")
              } else{
                core.info("Feature:" + json_list[i]["name"] + " passed")
              }
            }
          } catch(err) {
            core.error("Error while reading or parsing the JSON")
            core.setFailed(err)
          }
