<!--
Copyright (c) 2024 General Motors GTO LLC

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
SPDX-FileType: SOURCE
SPDX-FileCopyrightText: 2024 General Motors GTO LLC
SPDX-License-Identifier: Apache-2.0
-->

<testsuite name="tests.register_and_send.Default" tests="3" errors="0" failures="0" skipped="0" time="1.190838" timestamp="2024-02-20T18:17:26.782790" hostname="USMCDWNCAD73ZD0"><testcase classname="tests.register_and_send.Default" name="To test the registerlistener and send apis -- @1.1 topic_names" status="passed" time="1.015511"><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: To test the registerlistener and send apis -- @1.1 topic_names
    Given “python” creates data for "registerlistener" ... passed in 0.001s
    And sets "uri.entity.name" to "body.access" ... passed in 0.001s
    And sets "uri.resource.name" to "door" ... passed in 0.001s
    And sets "uri.resource.instance" to "front_left" ... passed in 0.001s
    And sets "uri.resource.message" to "Door" ... passed in 0.002s
    And sends "registerlistener" request ... passed in 0.032s
    And the status for "registerlistener" request is "OK" ... passed in 0.001s
    When “java” creates data for "send" ... passed in 0.706s
    And sets "uri.entity.name" to "body.access" ... passed in 0.003s
    And sets "uri.resource.name" to "door" ... passed in 0.001s
    And sets "uri.resource.instance" to "front_left" ... passed in 0.001s
    And sets "uri.resource.message" to "Door" ... passed in 0.001s
    And sets "attributes.priority" to "UPRIORITY_CS1" ... passed in 0.001s
    And sets "attributes.type" to "UMESSAGE_TYPE_PUBLISH" ... passed in 0.002s
    And sets "attributes.id" to "12345" ... passed in 0.002s
    And sets "payload.format" to "protobuf" ... passed in 0.001s
    And sets "payload.value" to "serialized protobuf data" ... passed in 0.001s
    And sends "send" request ... passed in 0.255s
    And the status for "send" request is "OK" ... passed in 0.002s
    Then "python" receives "payload.value" as "serialized protobuf data" ... passed in 0.001s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
ta_socket <socket.socket fd=940, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53832)>
accepted <socket.socket fd=468, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53834)> from ('127.0.0.1', 53834)
ta_socket <socket.socket fd=468, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53834)>
Initialized new client socket! java ('127.0.0.1', 53834)
ta_socket <socket.socket fd=940, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53832)>
---------------------------------OnReceive response from Test Agent!---------------------------------
source {
  entity {
    name: "body.access"
  }
  resource {
    name: "door"
    instance: "front_left"
    message: "Door"
  }
}
attributes {
  id {
    msb: 12345
  }
  type: UMESSAGE_TYPE_PUBLISH
  sink {
  }
  priority: UPRIORITY_CS1
}
payload {
  value: "serialized protobuf data"
  format: UPAYLOAD_FORMAT_PROTOBUF
}

-----------------------------------------------------------------------------------------------------
ta_socket <socket.socket fd=468, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53834)>

]]>
</system-out></testcase><testcase classname="tests.register_and_send.Default" name="To test the registerlistener and send apis -- @1.2 topic_names" status="passed" time="0.087501"><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: To test the registerlistener and send apis -- @1.2 topic_names
    Given “python” creates data for "registerlistener" ... passed in 0.002s
    And sets "uri.entity.name" to "body.access" ... passed in 0.002s
    And sets "uri.resource.name" to "door" ... passed in 0.001s
    And sets "uri.resource.instance" to "front_left" ... passed in 0.002s
    And sets "uri.resource.message" to "Door" ... passed in 0.001s
    And sends "registerlistener" request ... passed in 0.017s
    And the status for "registerlistener" request is "OK" ... passed in 0.002s
    When “python” creates data for "send" ... passed in 0.001s
    And sets "uri.entity.name" to "body.access" ... passed in 0.002s
    And sets "uri.resource.name" to "door" ... passed in 0.002s
    And sets "uri.resource.instance" to "front_left" ... passed in 0.001s
    And sets "uri.resource.message" to "Door" ... passed in 0.001s
    And sets "attributes.priority" to "UPRIORITY_CS1" ... passed in 0.003s
    And sets "attributes.type" to "UMESSAGE_TYPE_PUBLISH" ... passed in 0.003s
    And sets "attributes.id" to "12345" ... passed in 0.002s
    And sets "payload.format" to "protobuf" ... passed in 0.003s
    And sets "payload.value" to "serialized protobuf data" ... passed in 0.001s
    And sends "send" request ... passed in 0.040s
    And the status for "send" request is "OK" ... passed in 0.001s
    Then "python" receives "payload.value" as "serialized protobuf data" ... passed in 0.001s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
ta_socket <socket.socket fd=940, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53832)>
ta_socket <socket.socket fd=940, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53832)>
---------------------------------OnReceive response from Test Agent!---------------------------------
source {
  entity {
    name: "body.access"
  }
  resource {
    name: "door"
    instance: "front_left"
    message: "Door"
  }
}
attributes {
  id {
    msb: 12345
  }
  type: UMESSAGE_TYPE_PUBLISH
  sink {
  }
  priority: UPRIORITY_CS1
}
payload {
  value: "serialized protobuf data"
  format: UPAYLOAD_FORMAT_PROTOBUF
}

-----------------------------------------------------------------------------------------------------

]]>
</system-out></testcase><testcase classname="tests.register_and_send.Default" name="To test the registerlistener and send apis -- @1.3 topic_names" status="passed" time="0.087826"><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: To test the registerlistener and send apis -- @1.3 topic_names
    Given “java” creates data for "registerlistener" ... passed in 0.001s
    And sets "uri.entity.name" to "body.access" ... passed in 0.001s
    And sets "uri.resource.name" to "door" ... passed in 0.001s
    And sets "uri.resource.instance" to "front_left" ... passed in 0.001s
    And sets "uri.resource.message" to "Door" ... passed in 0.001s
    And sends "registerlistener" request ... passed in 0.020s
    And the status for "registerlistener" request is "OK" ... passed in 0.002s
    When “python” creates data for "send" ... passed in 0.002s
    And sets "uri.entity.name" to "body.access" ... passed in 0.001s
    And sets "uri.resource.name" to "door" ... passed in 0.002s
    And sets "uri.resource.instance" to "front_left" ... passed in 0.001s
    And sets "uri.resource.message" to "Door" ... passed in 0.001s
    And sets "attributes.priority" to "UPRIORITY_CS1" ... passed in 0.001s
    And sets "attributes.type" to "UMESSAGE_TYPE_PUBLISH" ... passed in 0.001s
    And sets "attributes.id" to "12345" ... passed in 0.001s
    And sets "payload.format" to "protobuf" ... passed in 0.001s
    And sets "payload.value" to "serialized protobuf data" ... passed in 0.001s
    And sends "send" request ... passed in 0.047s
    And the status for "send" request is "OK" ... passed in 0.001s
    Then "java" receives "payload.value" as "serialized protobuf data" ... passed in 0.001s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
ta_socket <socket.socket fd=468, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53834)>
ta_socket <socket.socket fd=940, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53832)>
---------------------------------OnReceive response from Test Agent!---------------------------------
source {
  entity {
    name: "body.access"
  }
  resource {
    name: "door"
    instance: "front_left"
    message: "Door"
  }
}
attributes {
  id {
    msb: 12345
  }
  type: UMESSAGE_TYPE_PUBLISH
  sink {
  }
  priority: UPRIORITY_CS1
}
payload {
  value: "serialized protobuf data"
  format: UPAYLOAD_FORMAT_PROTOBUF
}

-----------------------------------------------------------------------------------------------------
ta_socket <socket.socket fd=468, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.5', 12345), raddr=('127.0.0.1', 53834)>
---------------------------------OnReceive response from Test Agent!---------------------------------
source {
  entity {
    name: "body.access"
  }
  resource {
    name: "door"
    instance: "front_left"
    message: "Door"
  }
}
attributes {
  id {
    msb: 12345
  }
  type: UMESSAGE_TYPE_PUBLISH
  sink {
  }
  priority: UPRIORITY_CS1
}
payload {
  value: "serialized protobuf data"
  format: UPAYLOAD_FORMAT_PROTOBUF
}

-----------------------------------------------------------------------------------------------------

]]>
</system-out></testcase></testsuite>